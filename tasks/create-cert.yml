---
- name: Check if individual certificate exists.
  stat:
    path: /etc/letsencrypt/live/{{ certbot_domain }}/cert.pem
  register: letsencrypt_cert


- name: Generate new individual certificate if one doesn't exist.
  command: "{{ certbot_create_command }}"
  when: not letsencrypt_cert.stat.exists


- name: Check if shared certificates exists.
  stat:
    path: /etc/letsencrypt/live/{{ item }}/cert.pem
  register: letsencrypt_cert_shared
  with_items: "{{ certbot_shared_domains }}"
  when: certbot_shared_domains is defined

# - name: Print value
#   debug:
#     var: letsencrypt_cert_shared


# - name: Generate new shared certificates if they do not exist.
#   # command: "{{ certbot_shared_create_command }}"
#   command: >-
#     {{ certbot_script }} certonly
#     --dns-route53
#     --dns-route53-propagation-seconds 30
#     -d {{ item }}
#   with_items: "{{ certbot_shared_domains }}"
#   when:
#    - certbot_shared_domains is defined
#    - not letsencrypt_cert_shared.new.timothylytle.miarecdev.net.stat.exists

- name: Generate new shared certificates if they do not exist.
  command: >-
    {{ certbot_script }} certonly
    --dns-route53
    --dns-route53-propagation-seconds 30
    -d {{ item.item }}
  loop: "{{ letsencrypt_cert_shared.results }}"
  when:
   - certbot_shared_domains is defined
   - not item.stat.exists



# ToDO
# should we do the same with the shared domain
# make Configure Apache step able to do Debian and redhat

- name: Configure Apache | RedHat
  lineinfile:
    dest: "{{ apache_conf_path }}/ssl.conf"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - regexp: '^SSLCertificateFile '
      line: 'SSLCertificateFile /etc/letsencrypt/live/{{ certbot_domain }}/cert.pem'
    - regexp: '^SSLCertificateKeyFile '
      line: 'SSLCertificateKeyFile /etc/letsencrypt/live/{{ certbot_domain }}/privkey.pem'
    - regexp: '^#?SSLCertificateChainFile '
      line: 'SSLCertificateChainFile /etc/letsencrypt/live/{{ certbot_domain }}/chain.pem'

  notify: reload apache
  when: ansible_os_family == "RedHat"


- name: Configure Apache | Debian
  lineinfile:
    dest: "{{ apache_conf_path }}/sites-available/default-ssl.conf"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - regexp: '^\s*SSLCertificateFile\s+/etc/'
      line: 'SSLCertificateFile /etc/letsencrypt/live/{{ certbot_domain }}/cert.pem'
    - regexp: '^\s*SSLCertificateKeyFile\s+/etc/'
      line: 'SSLCertificateKeyFile /etc/letsencrypt/live/{{ certbot_domain }}/privkey.pem'
    - regexp: '^\s*#?\s*SSLCertificateChainFile\s+/etc/'
      line: 'SSLCertificateChainFile /etc/letsencrypt/live/{{ certbot_domain }}/chain.pem'

  notify: reload apache
  when: ansible_os_family == "Debian"


- name: a2ensite default-ssl site | Debian
  command: a2ensite default-ssl
  args:
    creates: "{{ apache_conf_path }}/sites-enabled/default-ssl.conf"
  notify: reload apache
  when: ansible_os_family == "Debian"


- name: Create shared domain ssl conf file
  template:
    src: shared-ssl.conf.j2
    dest: "{{ apache_conf_path }}/shared-ssl.conf"
  when: certbot_shared_domains is defined
  notify: reload apache

- name: Add shared domain ssl conf file to apache config
  lineinfile:
    path: "{{ apache_conf_path }}/ssl.conf"
    state: present
    line: "Include /etc/httpd/conf.d/shared-ssl.conf"
  when: certbot_shared_domains is defined
  notify: reload apache

- name: Remove shared domain ssl conf file from apache config
  lineinfile:
    path: "{{ apache_conf_path }}/ssl.conf"
    state: absent
    line: "Include /etc/httpd/conf.d/shared-ssl.conf"
  when: certbot_shared_domains is not defined
  notify: reload apache